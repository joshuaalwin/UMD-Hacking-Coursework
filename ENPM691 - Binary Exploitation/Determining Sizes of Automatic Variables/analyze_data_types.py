import gdb

# GDB Python script to analyze the C code and deduce the size of data types and assembly instructions for multiplication by constants

def analyze_data_types():
    print("Analyzing Data Types in C code:")

    # GDB commands to print the size of each variable
    gdb.execute("print sizeof(int)")
    gdb.execute("print sizeof(char)")
    gdb.execute("print sizeof(float)")
    gdb.execute("print sizeof(double)")
    gdb.execute("print sizeof(long)")
    gdb.execute("print sizeof(short)")
    gdb.execute("print sizeof(long long)")
    gdb.execute("print sizeof(long double)")

def analyze_multiplication_optimizations():
    print("\nAnalyzing Assembly Instructions for Multiplication by Constants:")

    # Assembly code for multiplication by 2
    print("\nMultiplication by 2 (Optimization using add):")
    gdb.execute("disassemble mulBy2")

    # Assembly code for multiplication by 4
    print("\nMultiplication by 4 (Optimization using shl):")
    gdb.execute("disassemble mulBy4")

    # Assembly code for multiplication by 7
    print("\nMultiplication by 7 (Optimization using shl and sub):")
    gdb.execute("disassemble mulBy7")

    # Assembly code for multiplication by 10
    print("\nMultiplication by 10 (Optimization using shl and add):")
    gdb.execute("disassemble mulBy10")

    # Assembly code for multiplication by 2000
    print("\nMultiplication by 2000 (Using imul):")
    gdb.execute("disassemble mulBy2000")

def main():
    # Start GDB and load the C program
    gdb.execute("file your_program.out")

    # Set a breakpoint at main to start analysis
    gdb.execute("break main")

    # Run the program
    gdb.execute("run")

    # Analyze data types
    analyze_data_types()

    # Analyze multiplication optimizations
    analyze_multiplication_optimizations()

    # Continue execution
    gdb.execute("continue")

if __name__ == "__main__":
    main()
