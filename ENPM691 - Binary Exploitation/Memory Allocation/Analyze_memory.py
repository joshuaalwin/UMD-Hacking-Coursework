"""
Author: T3rminux
Objective: This Python GDB script automates the analysis of memory allocation
for different types of variables (global, local, static, and heap) in a C program.

Usage:
1. Save this script as 'analyze_memory.py'.
2. Compile your C program with debugging information:
   gcc -m32 -g address_layout.c global_vars.c -o address_layout
3. Run GDB with your executable:
   gdb ./address_layout
4. Source this script in GDB:
   source analyze_memory.py
5. Run your program inside GDB:
   run
6. Execute the custom command to analyze memory:
   analyze_memory

Disclaimer:
This script is intended to automate memory analysis tasks in GDB. 
While it simplifies the process, it is essential to manually debug and analyze 
programs for a deeper understanding of memory layout and behavior. Automation 
can miss nuances that manual inspection would uncover.
"""

import gdb

class AnalyzeMemory(gdb.Command):
    """Analyze memory layout of different variable types"""

    def __init__(self):
        super(AnalyzeMemory, self).__init__("analyze_memory", gdb.COMMAND_USER)

    def invoke(self, arg, from_tty):
        # Analyze global variables
        self.analyze_global_variable("global_var_1")
        self.analyze_global_variable("global_uninit_var_1")

        # Analyze local variables
        self.analyze_local_variable("local_var_1")

        # Analyze static variables
        self.analyze_global_variable("static_var_1")

        # Analyze heap variables
        self.analyze_heap_variable("ptr_1")

    def analyze_global_variable(self, var_name):
        try:
            symbol = gdb.lookup_symbol(var_name)[0]
            if symbol is None:
                print(f"Global variable {var_name} not found.")
                return
            address = symbol.value().address
            print(f"{var_name} address: {address}")
            gdb.execute(f"info symbol {address}")
        except Exception as e:
            print(f"Error analyzing global variable {var_name}: {e}")

    def analyze_local_variable(self, var_name):
        try:
            frame = gdb.selected_frame()
            local_var = frame.read_var(var_name)
            print(f"{var_name} address: {local_var.address}")
            gdb.execute(f"info frame")
            gdb.execute(f"x/x {local_var.address}")
        except Exception as e:
            print(f"Error analyzing local variable {var_name}: {e}")

    def analyze_heap_variable(self, var_name):
        try:
            frame = gdb.selected_frame()
            heap_var = frame.read_var(var_name)
            print(f"{var_name} address: {heap_var}")
            gdb.execute("heap")
            gdb.execute(f"vmmap {heap_var}")
        except Exception as e:
            print(f"Error analyzing heap variable {var_name}: {e}")

# Register the command with GDB
AnalyzeMemory()
